doctype html
html
  head
    title
      | DvdRentalPractice
    / 面倒臭いのでCDN経由でbootstrap4を利用することにする
    link(
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
      integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"
    )
    script(
      src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
      integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
      crossorigin="anonymous"
    )
    script(
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
      integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
      crossorigin="anonymous"
    )
    script(
      src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
      integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
      crossorigin="anonymous"
    )
    link(
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/railscasts.min.css"
    )
    script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"
    javascript:
      document.addEventListener('turbolinks:load', function() {
          hljs.initHighlightingOnLoad();
      });
      // @see https://github.com/turbolinks/turbolinks/issues/75#issuecomment-244915109
      $(document).on('turbolinks:click', function (event) {
          if (event.target.getAttribute('href').charAt(0) === '#') {
              return event.preventDefault()
          }
      });
    = csrf_meta_tags
    = stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload'
    = javascript_include_tag 'application', 'data-turbolinks-track': 'reload'
  body
    nav.navbar.navbar-expand-lg.navbar-dark.bg-dark
      = link_to 'DVD Rental', root_path, class: 'navbar-brand'

    .container-fluid
      .row
        .col-md-2
          ruby:
            model_names = ActiveRecord::Base.connection.tables.map(&:classify).sort
            models = model_names.map { |model_name| Object.const_get(model_name) rescue nil }.compact
          .list-group.list-group-flush
            - models.each do |model|
              ruby:
                next if model.primary_key.nil?
                model_path = eval("#{model.table_name.pluralize}_path")
                classes = %w(list-group-item list-group-item-action)
                classes << 'active' if current_page?(model_path)
              = link_to model.table_name, model_path, class: classes.join(' ')
        .col-md-10
          - flash.each do |k, v|
            - case k
            - when 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'
              .alert class=("alert-#{k}") role='alert' = v
            - else
              .alert.alert-dark role='alert' = v
          = yield
